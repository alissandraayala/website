---
title: "Ayala Project 1: Learning How To Tidy"
author: "Alissandra Ayala, Ecologist in Training"
date: "10/14/2019"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
I have chosen to work with these datasets because I am interested in pursuing a career in ecology and conservation. The first dataset I am working with details the lifespan of several species of zoo animals. Its variables include scientific and common names, taxon, overall minimum life expectancy, overall sample size, and several of the same categories broken up by male and female sex (because life expectancy can often depend on sex). The second dataset I am working with details the body size of several primates involved in an ecological study. This dataset contains variables such as family, genus, Common name, scientific name, body mass in kg overall, body mass in kg by sex, and sample size (Ref1). These 2 datasets have 2 variables in common: scientific name and common name. I do not expect any associations between the data, however I expect that female animals will have a larger life expectancy in the data from the first dataset.


```{r}
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)


#Importing my data
df1<-read.csv("~/Downloads/BodyMass.csv")
df2<-read.csv("~/Downloads/AZA_MLE_Jul2018.csv")  

#tidying data and joining it
df1<-df1%>%na.omit
df2<-df2%>%select(-c(16,17))
df1<-df1%>%mutate(Species=gsub("_"," ",Species))
animaldata<-df1%>%full_join(df2,by=c("Species"="Scientific.Name"))
head(animaldata)
```

I used a full join because I did not want to lose any variables that the two datasets did not have in common. I combined a dataset of 660 observaations with a dataset of 629 observations and got a dataset of 1022 observations. I lost 0 cases as a result of the join. Since I joined by 3 variables, instead of 26 columns, I now have 24.


#Use all six core dplyr functions (filter, select, arrange, group_by, mutate, summarize) 
#to manipulate and explore your dataset. For mutate, create a new variable that is 
#a function of at least one other variable, preferably using a dplyr vector function 
#(see dplyr cheatsheet). Itâ€™s fine to use the _if, _at, _all versions of 
#mutate/summarize instead (indeed, it is encouraged if you have lots of variables)

```{r}
animaldata1 <-animaldata %>% filter(duplicated(animaldata))
head(animaldata1)
animaldata2 <-animaldata %>% select(BodyMass_kg) %>% arrange() 
head(animaldata2)
animaldata3 <-animaldata %>% group_by(TaxonClass) %>% mutate(median = median(BodyMass_kg), dev = sd(BodyMass_kg), absdev = abs(dev))
head(animaldata3)

#doing summary statistics
 sumanimaldata <-animaldata %>% summarize(mean(BodyMass_kg, na.rm=T), n(), n_distinct(TaxonClass))
 head(sumanimaldata)
 
 demanimaldata <- animaldata %>% summarize(mean(Female.Sample.Size, na.rm = T), mean(Male.Sample.Size, na.rm = T), mean(Overall.Sample.Size, na.rm = T) )
 head(demanimaldata)
 
 #exploring the life expectancy variables
 maxminanimaldata <- animaldata %>% group_by(TaxonClass) %>% summarize(max(Overall.MLE,na.rm=T), sd(Overall.MLE, na.rm = T), median(Overall.MLE, na.rm = T), mean(Overall.MLE, na.rm = T))
 head(maxminanimaldata)
 
```
I used the dplyr functions to pick apart my data and look through it: filter to cut out any duplicated data (there is none!), select to view one variable then arranged that variable, and group_by to create groups before using mutate to make new stats columns. I used summary statistics to find the mean body size, n to find the size of my dataset, and the number of distinct taxa. I also used mean on my 3 sample size variables (Female, Male, Overall) to compare the average number of sexes sampled; more females were sampled than males. But the really interesting part was when I used summary statistics on the life expectancy data! I grouped by each taxa and found the mean, max, min, median, and standard deviation!


```{r}
#data visualization
#plot1: maybe plot something other than taxonclass as fill
ggplot(animaldata, aes(x = animaldata$TaxonClass, fill=animaldata$TaxonClass))+
  geom_bar(aes(y=animaldata$Overall.MLE), stat="summary", fun.y="mean")+ theme_classic() + ggtitle("Max Lifespan by Taxon") +xlab ("Taxon") + theme(axis.text.x = element_text(face="bold", color="black", 
                           size=7, angle=15),
          axis.text.y = element_text(face="bold", color="black", 
                           size=10, angle=0)) + ylab("Overall MLE")

#plot2
ggplot(animaldata, aes(x=animaldata$Male.Sample.Size, y=animaldata$Female.Sample.Size, color=animaldata$TaxonClass)) + geom_point() +  theme_minimal() + scale_color_brewer(palette="Dark2") + ggtitle("Male Sample Size vs. Female Sample Size") +xlab ("Male Sample Size") + ylab("Female Sample Size")
```

My first plot depicts the average maximum lifespan per Taxon. I thought it would be interesting to compare the life spans of zoo animals between taxa. Surprisingly, the group with the highest average is the Chondricthyes which is a group that includes cartilaginous fishes (sharks and rays). Mammals live the second longest, followed by birds then reptiles. Amphibians are in the fifth rank. In last place are the arachnids, which is no surprise.

My second plot is a scatterplot that compares the number of male and female samples. There is a very apparent positive trend in the graph: the more male samples that are taken, the more female samples are taken in that taxon. The most male and female samples were taken in the Aves taxon, at well over 1,000 samples for each sex (for one data point).

```{r}
animaldata %>% select_if(is.numeric) -> df
df[is.finite(rowSums(df)),]-> df

#df <- df[!is.nan(df)]
df %>%na.omit

animal_nums<-df%>%select_if(is.numeric)%>%select(1:3)%>%scale
rownames(animal_nums)<-df$CommonName

animal_pca<-princomp(animal_nums)
names(animal_pca)
summary(animal_pca, loadings=T)

eigval<-animal_pca$sdev^2
varprop=round(eigval/sum(eigval),2)

ggplot()+geom_bar(aes(y=varprop,x=1),stat="identity")+xlab("")+geom_path(aes(y=varprop,x=1))+
  geom_text(aes(x=1,y=varprop,label=round(varprop,2)),vjust=1,col="white",size=5)+
  scale_y_continuous(breaks=seq(0,.6,.2),labels = scales::percent)+
  scale_x_continuous(breaks=1:10)

```
From this chart, it looks like my first principal component explains 98% of the data, so I will plot this one.


```{r}
round(cumsum(eigval)/sum(eigval),2)
eigval
summary(animal_pca, loadings=T)


ggplot()+geom_point(aes(animal_pca$scores[,1],
                        animal_pca$scores[,2]))+xlab("PC1")+ylab("PC2")

animal_pca$loadings[1:3,1:2]%>%as.data.frame%>%rownames_to_column%>%
ggplot()+geom_hline(aes(yintercept=0),lty=2)+
  geom_vline(aes(xintercept=0),lty=2)+ylab("PC2")+xlab("PC1")+
  geom_segment(aes(x=0,y=0,xend=Comp.1,yend=Comp.2),arrow=arrow(),col="red")+
  geom_label(aes(x=Comp.1*1.1,y=Comp.2*1.1,label=rowname))

[Link to project 1](/Project1)
```

PC1 describes the spread of the data on the X axis. PC2 describes the spread of the data on the Y axis. The difference in magnitude of the data explained by each principle component is apparent in the interval marks on each axis. PC1 has a range of -1 to 4 whereas PC2 has a range of -0.5 to 0.5. When we look at a plot of the loadings (which displays which variables contribute to the principle compenents), average body mass is more closely corellated to the male body mass than the female body mass. This is indicated by the smaller angle in between the vectors. We can also see that the vectors are more horizontally oriented (PC1) than vertically oriented (PC2).